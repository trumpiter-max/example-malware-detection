from .base import *
import json
import hashlib
from werkzeug.utils import secure_filename
from .utils.analyzer import process_file

general_blueprint = Blueprint('general_blueprint', __name__, template_folder='templates', static_folder='static')

def generate_file_name(length):
    letters = string.ascii_lowercase + string.digits
    filename = ''.join(random.choice(letters) for i in range(length))
    return filename

def sha256_hash(data):
    if (type(data) == str):
        return str(hashlib.sha256(data.encode('UTF-8')).hexdigest())
    else:
        sha256_hash = hashlib.sha256()
        for byte_block in iter(lambda: data.read(4096),b""):
            sha256_hash.update(byte_block)
    return str(sha256_hash.hexdigest())

def md5_hash(data):
    if (type(data) == str):
        return str(hashlib.md5(data.encode('UTF-8')).hexdigest())
    else:
        md5_hash = hashlib.md5()
        for byte_block in iter(lambda: data.read(4096),b""):
            md5_hash.update(byte_block)
    return str(md5_hash.hexdigest())

@general_blueprint.route("/", methods = ['POST', 'GET'])
def index(): 
    return render_template('index.html')

@general_blueprint.route("/upload", methods = ['POST'])
def upload():
    if request.method == 'POST':
        # Handle file upload
        if 'file' not in request.files:
            return redirect(request.url)
        file = request.files['file']
        if not file.filename:
            return redirect(request.url)
        if not file.filename.lower().endswith('.exe'):
            flash('Only EXE files are allowed')
            return redirect(request.url)
        
        # Save origin file to storage
        file_name = generate_file_name(40)
        origin_name = file.filename
        file.filename = file_name + '.exe'
        current_path = os.path.dirname(os.path.realpath(__file__))
        file_save_path = os.path.join(current_path + '/storage/file/', secure_filename(file.filename))
        with open(os.path.join(file_save_path), 'wb') as origin_file:
            origin_file.write(file.read())

        # Some config for file upload
        sha256_file_hash = sha256_hash(file)
        md5_file_hash = md5_hash(file)
        time_save = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Analyze file to malware or not
        result = process_file(file_save_path)

        data = {
            'origin_name': origin_name,
            'file_name': file.filename,
            'sha256_file_hash': sha256_file_hash,
            'md5_file_hash': md5_file_hash,
            'file_path': file_save_path,
            'time_save': time_save,
            'result': result
        }
        json_object = json.dumps(data, indent=4)
        
        # Writing to sample.json
        json_name = file_name + '.json'
        with open(current_path + "/storage/report/" + json_name, "w") as outfile:
            outfile.write(json_object)
    
    return redirect(url_for('general_blueprint.index'))

@general_blueprint.route("/recent", methods = ['GET'])
def recent():
    current_path = os.path.dirname(os.path.realpath(__file__))
    json_files = os.listdir(current_path + '/storage/report/')
    json_files.sort(key=lambda x: os.path.getmtime(current_path + '/storage/report/' + x), reverse=True)
    return render_template('recent.html', json_files=json_files)

@general_blueprint.route("/view/report/<filename>", methods=['GET'])
def view_json(filename):
    current_path = os.path.dirname(os.path.realpath(__file__))
    return send_from_directory(current_path + '/storage/report/', filename)

@general_blueprint.errorhandler(404)
def page_not_found(error):
    return render_template('404.html'), 200
