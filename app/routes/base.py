# Base libraries
from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, send_from_directory, Blueprint, send_file, make_response
# Used to save log file without web server
# from logging.config import dictConfig
from datetime import datetime
import os, subprocess
import random, string

# config log format file
'''
dictConfig(
    {
        "version": 1,
        "formatters": {
            "default": {
                "format": "[%(asctime)s] [%(levelname)s | %(module)s] %(message)s",
                "datefmt": "%B %d, %Y %H:%M:%S %Z",
            },
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "default",
            },
            "file": {
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': 'debug.log',
                'maxBytes': 4194304, 
                'backupCount': 10,
                'level': 'DEBUG',
            },
        },
        "root": {"level": "DEBUG", "handlers": ["console", "file"]},
    }
)
'''

def run_command(command):
    return subprocess.Popen(command, shell=True, stdout=subprocess.PIPE).stdout.read()

def generate_file_name(length):
    letters = string.ascii_lowercase + string.digits
    filename = ''.join(random.choice(letters) for i in range(length))
    return filename